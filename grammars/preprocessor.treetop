module OrigenVerilog
  # The preprocessor implements the below compiler directives, fully substituting
  # and including/excluding the text as appropriate before handing over the pre-processed
  # text to be parsed as Verilog.
  # 
  # Any compiler directives not listed below will be parsed during the main Verilog parsing
  # stage and will be included in the Verilog AST.
  #
  # * define
  # * undef
  # * ifdef
  # * ifndef
  # * include
  # * error
  module Preprocessor
    grammar Grammar
      include Verilog::Grammar

      rule source
        source_items+ {
          def to_ast
            n :source, *elements_to_ast
          end
        }
      end

      rule source_items
        comment / compiler_directive / macro_reference / text_block
      end

      rule text_block
        (!(comment / compiler_directive / compiler_directive_terminator / macro_reference) .)+ {
          def to_ast
            n :text_block, text_value
          end
        }
      end

      rule compiler_directive
        text_macro_definition / undefine_compiler_directive / ifdef_directive / ifndef_directive /
        include_compiler_directive / error_compiler_directive
      end

      rule compiler_directive_terminator
        "`else" / "`elsif" / "`endif"
      end

      ###########################################################################################
      ## MACRO REFERENCE
      ###########################################################################################

      rule macro_reference
        "`" name:(!illegal_macro_reference text_macro_identifier) space* s2:("(" space* args:list_of_actual_arguments space* ")")? {
          def to_ast
            if s2.respond_to?(:args)
              n :macro_reference, name.text_value, s2.args.to_ast
            else
              n :macro_reference, name.text_value
            end
          end
        }
      end

      rule list_of_actual_arguments
        actual_argument (space* ',' space* actual_argument)* {
          def to_ast
            n :arguments, *elements_to_ast
          end
        }
      end

      # The Verilog (2005) spec says that this should just be an expression rule, but that does not seem to be true
      # since in one of our examples it contains a task reference.
      # Making an alternative rule that matches everything until a comma or closing bracket, but allows commas
      # to exist within an argument as long as they are contained within some kind of bracket pair.
      rule actual_argument
        actual_argument_section+ {
          def to_ast
            text_value
          end
        }
      end

      rule actual_argument_section
        [^,(){}\[\]] / balanced_bracket_string / balanced_square_bracket_string / balanced_curly_bracket_string
      end

      rule balanced_bracket_string
        "(" ( [^\(\)]  / balanced_bracket_string )* ")"
      end

      rule balanced_square_bracket_string
        "[" ( [^\[\]]  / balanced_square_bracket_string )* "]"
      end

      rule balanced_curly_bracket_string
        "{" ( [^\{\}]  / balanced_curly_bracket_string )* "}"
      end

      rule illegal_macro_reference
        "begin_keywords" /
        "celldefine" /
        "default_nettype" /
        "define" /
        "else" /
        "elsif" /
        "end_keywords" /
        "endcelldefine" /
        "endif" /
        "ifdef" /
        "ifndef" /
        "include" /
        "line" /
        "nounconnected_drive" /
        "pragma" /
        "resetall" /
        "timescale" /
        "unconnected_drive" /
        "undef" /
        "error"
      end

      ###########################################################################################
      ## ERROR
      ###########################################################################################

      rule error_compiler_directive
        "`error" space+ '"' space* filename space* '"' {
          def to_ast
            n :error, *elements_to_ast
          end
        }
      end

      ###########################################################################################
      ## INCLUDE
      ###########################################################################################

      # include_compiler_directive ::=
      # `include "filename"
      rule include_compiler_directive
        "`include" space+ '"' space* filename space* '"' {
          def to_ast
            n :include, *elements_to_ast
          end
        }
      end

      rule filename
        (!(N / comment / '"') .)+ {
          def to_ast
            text_value.strip
          end
        }
      end

      ###########################################################################################
      ## DEFINE
      ###########################################################################################

      # text_macro_definition ::=
      #   `define text_macro_name [ (list_of_formal_arguments) ]
      rule text_macro_definition
        "`define" space+ text_macro_name space* macro_text? {
          def to_ast
            n :define, *elements_to_ast
          end
        }
      end
      rule macro_text
        ("\\" space* N / !(N / one_line_comment) .)+ {
          def to_ast
            n :text, text_value.strip.gsub(/\\\s*\n/, "\n") unless text_value.empty?
          end
        } 
      end
      # text_macro_name ::=
      #   text_macro_identifier
      rule text_macro_name
        text_macro_identifier space* ("(" space* list_of_formal_arguments space* ")")? {
          def to_ast
            n :name, *elements_to_ast
          end
        }
      end
      # list_of_formal_arguments ::=
      #   formal_argument_identifier { , formal_argument_identifier }
      rule list_of_formal_arguments
        formal_argument_identifier (space* ',' space* formal_argument_identifier)* {
          def to_ast
            n :arguments, *elements_to_ast
          end
        }
      end
      # formal_argument_identifier ::=
      #   simple_identifier
      rule formal_argument_identifier
        simple_identifier
      end

      ###########################################################################################
      ## UNDEF
      ###########################################################################################

      # undefine_compiler_directive ::=
      #   `undef text_macro_identifier
      rule undefine_compiler_directive
        "`undef" space+ text_macro_identifier {
          def to_ast
            n :undef, *elements_to_ast
          end
        }
      end

      ###########################################################################################
      ## IFDEF
      ###########################################################################################


      # ifdef_directive ::=
      #   `ifdef text_macro_identifier
      #   ifdef_group_of_lines
      #   { `elsif text_macro_identifier elsif_group_of_lines }
      #   [ `else else_group_of_lines ]
      #   `endif
      rule ifdef_directive
        "`ifdef" space+ label:text_macro_identifier space* contents:source_items* s
        elsif_nodes:("`elsif" space+ label:text_macro_identifier space* contents:source_items*)* space* 
        else_node:("`else" space* contents:source_items*)? space* 
        "`endif"
        {
          def to_ast
            node = n :ifdef, label.text_value, *elements_to_ast(contents.elements)
            elsif_nodes.elements.each do |elsif_node|
              if elsif_node.respond_to?(:contents)
                e = n :elsif, elsif_node.label.text_value, *elements_to_ast(elsif_node.contents.elements)
                node = node.updated(nil, node.children + [e])
              end
            end
            if else_node.respond_to?(:contents)
              node = node.updated(nil, node.children + [n(:else, *elements_to_ast(else_node.contents.elements))])
            end
            node
          end
        }
      end

      ###########################################################################################
      ## IFNDEF
      ###########################################################################################

      # ifndef_directive ::=
      #   `ifndef text_macro_identifier
      #   ifndef_group_of_lines
      #   { `elsif text_macro_identifier elsif_group_of_lines }
      #   [ `else else_group_of_lines ]
      #   `endif
      rule ifndef_directive
        "`ifndef" space+ label:text_macro_identifier space* contents:source_items* s
        elsif_nodes:("`elsif" space+ label:text_macro_identifier space* contents:source_items*)* space* 
        else_node:("`else" space* contents:source_items*)? space* 
        "`endif"
        {
          def to_ast
            node = n :ifndef, label.text_value, *elements_to_ast(contents.elements)
            elsif_nodes.elements.each do |elsif_node|
              if elsif_node.respond_to?(:contents)
                e = n :elsif, elsif_node.label.text_value, *elements_to_ast(elsif_node.contents.elements)
                node = node.updated(nil, node.children + [e])
              end
            end
            if else_node.respond_to?(:contents)
              node = node.updated(nil, node.children + [n(:else, *elements_to_ast(else_node.contents.elements))])
            end
            node
          end
        }
      end

      ###########################################################################################
      ## HELPERS
      ###########################################################################################

      # Override these comment rules to give them a to_ast method since we want to preserve
      # comments during preprocessing

      rule block_comment
        "/*" (!end_of_comment .)* end_of_comment {
          def to_ast
            n :comment, text_value
          end
        }
      end

      rule one_line_comment
        "//" (!N .)* {
          def to_ast
            n :comment, text_value
          end
        }
      end
    end
  end
end
